---
import Layout from "src/layouts/Layout.astro";
import { serverApp } from "@scripts/firebase/initServer";
import { getAuth } from "firebase-admin/auth";
import { TOKEN } from "@constants/cookies";

// Get client token from the URL param
const url = new URL(Astro.request.url);
const urlTokenParam = url.searchParams.get("token");

// Get token from cookies 
const cookieToken = Astro.cookies.get(TOKEN);
const token = urlTokenParam || cookieToken?.value;

if (!token) {
  // Unauthorised user. Redirect to sign in
  return Astro.redirect("/signin");
}

const auth = getAuth(serverApp);

try {
  // verify the auth token
  await auth.verifyIdToken(token);

  // set token cookie 
  // Note that the "TOKEN" constant refers to the string "X-Token."
  Astro.cookies.set(TOKEN, token, {
    path: "/",
    httpOnly: true,
    secure: true,
  });
} catch (error) {
  console.error("Could not decode token", {
    fromCookie: !!cookieToken?.value,
    fromUrl: !!urlTokenParam,
  });

  // Error occurred, e.g., invalid token. Redirect to sign in
  return Astro.redirect("/signin");
}
---

<Layout isPrivatePage>
  <div class="max-w-2xl mx-auto p-6">
    <h1 class="text-3xl font-bold mb-8 text-gray-800">Contact Lists</h1>
    <form class="space-y-6">
      <div class="flex flex-col">
        <label for="webhookUrl" class="text-sm font-medium text-gray-700 mb-2">Webhook URL</label>
        <input 
          type="text" 
          id="webhookUrl" 
          name="webhookUrl" 
          class="rounded-md border border-gray-300 px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
        />
      </div>
      <div class="flex flex-col">
        <label for="ipOrUrl" class="text-sm font-medium text-gray-700 mb-2">IP or URL to monitor</label>
        <input 
          type="text" 
          id="ipOrUrl" 
          name="ipOrUrl" 
          class="rounded-md border border-gray-300 px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
        />
      </div>
      <div class="flex flex-col">
        <label for="portNumber" class="text-sm font-medium text-gray-700 mb-2">Port Number</label>
        <input 
          type="text" 
          id="portNumber" 
          name="portNumber" 
          class="rounded-md border border-gray-300 px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
        />
      </div>
      <button 
        type="submit"
        class="bg-blue-600 text-white px-6 py-2 rounded-md hover:bg-blue-700 transition-colors duration-200"
      >
        Save changes
      </button>   
    </form>
    <p class="mt-4 ">
      <button id="deleteContacts" class="bg-red-600 text-white px-6 py-2 rounded-md hover:bg-red-700 transition-colors duration-200">Delete all logs and contacts</button>
    </p>
  </div>
  <script>
    import { baseUrl } from "@constants/api";

    const ipOrUrlInput = document.querySelector('#ipOrUrl') as HTMLInputElement;
    const portNumberInput = document.querySelector('#portNumber') as HTMLInputElement;
    const webhookUrlInput = document.querySelector('#webhookUrl') as HTMLInputElement;
    const saveButton = document.querySelector('button[type="submit"]') as HTMLButtonElement;

    const deleteContacts = document.querySelector('#deleteContacts') as HTMLButtonElement;

    if (deleteContacts) {
      deleteContacts.addEventListener('click', async () => {
        try {
          deleteContacts.innerText = 'Deleting...'
          deleteContacts.disabled = true;
          await  fetch(`${baseUrl}/delete-all-monitors`, {
            method: 'DELETE',
          })
        } catch (error) {
          console.error('Error deleting monitor(s)', error);
        } finally {
          deleteContacts.innerText = 'Delete all logs and contacts'
          deleteContacts.disabled = false;
        }
      })
    }

    if (saveButton && ipOrUrlInput && webhookUrlInput) {

    saveButton.addEventListener('click', async (e) => {
      e.preventDefault();
      
      saveButton.innerText = 'Saving...';
      saveButton.disabled = true;

      try {
        await fetch(`${baseUrl}/add-monitor`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            ipOrUrl: ipOrUrlInput.value,
            webhookUrl: webhookUrlInput.value,
            portNumber: portNumberInput.value,
          })
        })

        await fetch(`${baseUrl}/add-webhook`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            ipOrUrl: ipOrUrlInput.value,
            webhookUrl: webhookUrlInput.value,
          })
        });
      } catch (error) {
        console.error('Error saving monitor or webhook:', error);
      } finally {
        saveButton.innerText = 'Save changes';
        saveButton.disabled = false;
      }
    });
  }
  </script>
</Layout>

